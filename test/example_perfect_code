import os
import sqlite3
import logging
import hashlib
import re

# Set up logging
logging.basicConfig(level=logging.INFO)

# Function to hash passwords securely using SHA-256
def hash_password(password: str) -> str:
    if not password:
        raise ValueError("Password cannot be empty")
    return hashlib.sha256(password.encode('utf-8')).hexdigest()

# Function to validate email with regex
def is_valid_email(email: str) -> bool:
    regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(regex, email) is not None

# Function to safely execute SQL queries (avoiding SQL Injection)
def safe_execute_query(db_path: str, query: str, params: tuple = ()):
    if not os.path.exists(db_path):
        raise FileNotFoundError("Database file does not exist")
    
    with sqlite3.connect(db_path) as conn:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        return cursor.fetchall()

# Function to add a user to the database securely
def add_user_to_db(db_path: str, username: str, email: str, password: str):
    if not is_valid_email(email):
        raise ValueError("Invalid email format")
    
    hashed_password = hash_password(password)
    query = "INSERT INTO users (username, email, password) VALUES (?, ?, ?)"
    safe_execute_query(db_path, query, (username, email, hashed_password))
    logging.info(f"User {username} added successfully.")

# Main function
if __name__ == "__main__":
    database_path = "secure_users.db"
    username = "secure_user"
    email = "secure_user@example.com"
    password = "SuperSecureP@ssw0rd"
    
    try:
        add_user_to_db(database_path, username, email, password)
    except Exception as e:
        logging.error(f"An error occurred: {e}")
